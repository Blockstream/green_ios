stages:
    - format
    - build
    - test
    - distribute_qa
    - deploy

sast:
  stage: test
  before_script:
    - if [[ "$IGNORE_SECURITY" == "true" ]]; then exit 0; fi
  tags:
    - k8s-docker


include:
  - template: Jobs/SAST.gitlab-ci.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml
  
# FORMAT

.setup_env:
  before_script:
    - export LC_ALL=en_US.UTF-8
    - export LANG=en_US.UTF-8
    - ruby --version && gem --version && fastlane --version

test_format:
  stage: format
  extends: .setup_env
  tags:
    - osx-m4
  script:
    - fastlane run swiftlint

# BUILD
build_strings:
  stage: build
  when: manual
  artifacts:
    name: "green-ios-strings-$CI_COMMIT_REF_NAME"
    expire_in: 1 day
    when: on_success
    paths:
      - translations
  tags:
    - mini
  variables:
    TX_TOKEN: $TX_TOKEN
  script:
    - ./tools/transifex.sh -t ${TX_TOKEN}
    - mkdir translations
    - cp -rf gaios/*.lproj translations
    - rm -rf translations/Base.lproj

unsigned_debug:
  stage: build
  when: manual
  extends: .setup_env
  tags:
    - mini
  variables:
    GDK_COMMIT: latest
  script:
    - if [ "$GDK_COMMIT" != "latest" ]; then GDK_OPT="-c $GDK_COMMIT"; fi
    - ./tools/fetch_gdk_binaries.sh $GDK_OPT
    - fastlane build_unsigned_debug

development:
  stage: build
  extends: .setup_env
  tags:
    - mini
  artifacts:
    name: "green-ios-development-$CI_COMMIT_REF_NAME"
    expire_in: 1 day
    when: on_success
    paths:
      - dev
  variables:
    GDK_COMMIT: latest
  script:
    - if [ "$GDK_COMMIT" != "latest" ]; then GDK_OPT="-c $GDK_COMMIT"; fi
    - ./tools/fetch_gdk_binaries.sh $GDK_OPT
    - fastlane dev_release

production:
  stage: build
  when: manual
  extends: .setup_env
  tags:
    - mini
  artifacts:
    name: "green-ios-production-$CI_COMMIT_REF_NAME"
    expire_in: 1 day
    when: on_success
    paths:
      - prod
  variables:
    GDK_COMMIT: latest
  script:
    - if [ "$GDK_COMMIT" != "latest" ]; then GDK_OPT="-c $GDK_COMMIT"; fi
    - ./tools/fetch_gdk_binaries.sh $GDK_OPT
    - ruby --version && gem --version && fastlane --version
    - fastlane prod_release

# UPLOAD
.distribute: &distribute
  - ./tools/distribute.sh --app **/*.ipa --dest $FOLDER --url $LINK
  - echo "$LINK/index.html" | tee -a link | qrencode -t UTF8 && cat link

.upload_countly: &upload_countly
  - mkdir tmp && unzip ./**/*.app.dSYM.zip -d tmp
  - COUNTLY_UPLOADER=$(find ~/Library/Developer/Xcode/DerivedData -iname countly_dsym_uploader.sh | head -n 1)
  - find ./tmp -name \*.dSYM -exec $COUNTLY_UPLOADER $COUNTLY_APP_HOST $COUNTLY_APP_KEY {} \;

distribute_development:
  stage: distribute_qa
  needs: ["development"]
  tags:
    - mini
  artifacts:
    name: "green-ios-development-$CI_COMMIT_REF_NAME"
    expire_in: 1 day
    when: on_success
    paths:
      - dev
  variables:
    COUNTLY_APP_KEY: $COUNTLY_APP_KEY_DEV
    COUNTLY_APP_HOST: $COUNTLY_APP_HOST
    FOLDER: "dev"
    LINK: "https://storage.googleapis.com/green-ios-builds/$CI_PROJECT_NAME-$CI_COMMIT_SHA-dev"
  script:
    - *upload_countly
    - *distribute

distribute_production:
  stage: distribute_qa
  needs: ["production"]
  tags:
    - mini
  artifacts:
    name: "green-ios-production-$CI_COMMIT_REF_NAME"
    expire_in: 1 day
    when: on_success
    paths:
      - prod
  variables:
    COUNTLY_APP_KEY: $COUNTLY_APP_KEY_PROD
    COUNTLY_APP_HOST: $COUNTLY_APP_HOST
    FOLDER: "prod"
    LINK: "https://storage.googleapis.com/green-ios-builds/$CI_PROJECT_NAME-$CI_COMMIT_SHA-prod"
  script:
    - *upload_countly
    - *distribute

# STORE

upload_apple_store:
  when: manual
  stage: deploy
  needs: ["distribute_production"]
  tags:
    - osx-m4
  artifacts:
    name: "green-ios-production-$CI_COMMIT_REF_NAME"
    expire_in: 1 day
    when: on_success
    paths:
      - prod
  script:
    - fastlane upload_apple_store --verbose
  timeout: 2 hours


# GCLOUD

.cp_gcloud: &cp_gcloud
    - echo gs://$URLPATH
    - TMPF=$(mktemp) || exit 1
    - echo $GCLOUD_PUSH_KEY > $TMPF
    - export GOOGLE_APPLICATION_CREDENTIALS=$TMPF
    - gcloud auth activate-service-account --key-file=$TMPF
    - gsutil cp -r $CI_PROJECT_DIR/$FOLDER gs://$URLPATH
    - echo "https://storage.googleapis.com/$URLPATH/index.html"

cp_gcloud_development:
  image: blockstream/gcloud-docker-tf:1.1.7
  needs: ["distribute_development"]
  tags:
    - ga
  stage: deploy
  variables:
    FOLDER: "dev"
    URLPATH: "green-ios-builds/$CI_PROJECT_NAME-$CI_COMMIT_SHA-dev"
  script:
    - *cp_gcloud

cp_gcloud_production:
  image: blockstream/gcloud-docker-tf:1.1.7
  needs: ["distribute_production"]
  tags:
    - ga
  stage: deploy
  variables:
    FOLDER: "prod"
    URLPATH: "green-ios-builds/$CI_PROJECT_NAME-$CI_COMMIT_SHA-prod"
  script:
    - *cp_gcloud
